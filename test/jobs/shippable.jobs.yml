jobs:  
  - name: runshscript  
    type: runSh
   # allowPublicAccess: true
    steps:
    
      - IN: pipeline_scriptRepobb
        showBuildStatus: true
      - IN: ship_dh
      - IN: sample_img
      - IN: test_params  
      - IN: t2runsh
      - IN: key-values
      - TASK:
        - script: ./IN/pipeline_scriptRepobb/gitRepo/runsh/testscript.sh
        - script: echo $key1
        - script: echo $key2
    flags: runshscript
   #   - OUT: test_out_img


  - name: runsh_pre_jobscript
    type: runSh
    on_start:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc
      - script: echo 'it is for on_start'      
    steps:    
      - IN: pipeline_scriptRepobb
        switch: off
      - IN: runshscript   
      - IN: same_syncRepos
      - TASK:
        - script: ./IN/pipeline_scriptRepobb/gitRepo/runsh/pre_runshjob.sh    
        - script: ./IN/same_syncRepos/gitRepo/script.sh  
        - script: printenv
    flags: runsh_pre_jobscript
    on_success:      
      - script: echo 'test in on_success'
      - script: ls
      - script: echo 'it is success'
    # # - script: ./IN/sample-script-3/gitRepo/echo.sh
    on_failure:
      - script: echo 'testing1 failure'      
      - script: pwd
      - script: echo 'OOPS on_failure :('
    always:
      - script: echo "This works on_always"
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc

  - name: runcliscript
    type: runCLI
   # allowPublicAccess: true
    steps:      
      - IN: plscript_RepoTagsnReleases  
      - IN: ship_dh_cli
      - IN: ship_aws_cli
      - IN: ship_gke_cli
      - IN: ship_ecr_cli
      - IN: ship_gcr_cli
      - IN: ship_quay_cli
      - IN: t3runcli
      - IN: key-values    
      - TASK:        
        - script: ./IN/plscript_RepoTagsnReleases/gitRepo/runcli/accInt.sh 
       # - script: printenv
        - script: echo $key1
        - script: echo $key2
    flags: runcliscript    
        
  - name: manifest_dep
    type: manifest
    steps:
      - IN: deploy_img       
      - IN: t1
    flags: manifest_dep
    
  - name: deploy_ddc
    type: deploy    
    on_start:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc
    steps:      
      - IN: manifest_dep
      - IN: ddc_cluster
      - IN: ddc_dopts
      - TASK: managed  
    flags: deploy_ddc
    on_success:         
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc      
    on_failure:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc 

# Provision instances on AWS with Terraform
  - name: provision_aws_terraform_packer
    type: runCLI
    steps:
      - IN: ship_aws_cli
      - IN: same_syncRepos
        swtich: off
      - IN: ship_dh_cli
      - IN: test_paramsCLI
      - IN: pipeline_scriptRepobb
      - TASK:
       # - script: echo "shipctl copy_file_from_prev_state <filename> <topath>. Copies the file to the path supplied from the state folder of the previos run of the Job that is currently running."
       # - script: shipctl copy_file_from_prev_state "/test/jobs/config.json" 
        #- script: echo "shipctl copy_file_to_state <filename>. Copies the file to the state folder of the Job that is currently running. This will be available to the next run of the Job or any future Jobs that use this as an IN"
       # - script: shipctl copy_file_to_state "IN/same_syncRepos/gitRepo/test/jobs/testcopy.json"
        - script: echo "shipctl copy_resource_file_from_state <resource name> <filename> <topath>. Copies the file from the Resource State that was supplied as IN into the path supplied"
        - script: shipctl copy_resource_file_from_state "pipeline_scriptRepobb" "package.json" "IN/pipeline_scriptRepobb/gitRepo/copy.json"
       # - script: echo ""
       # - script: shipctl decrypt "properties.json" "/key/accounts"
       # - script: echo ""
       # - script: shipctl get_json_value "properties.json" "property2"
       # - script: echo ""
        #- script: shipctl get_integration_resource_field "ship_dh_cli" "username"
       # - script: echo ""
       # - script: shipctl get_resource_id "ship_dh_cli"
      #  - script: echo ""
      #  - script: shipctl get_resource_operation "ship_dh_cli"
      #  - script: echo ""
     #   - script: shipctl get_resource_state "ship_dh_cli"
     #   - script: echo ""
     #   - script: shipctl get_resource_type "ship_dh_cli"
     #   - script: echo ""
     #   - script: shipctl get_resource_version_id "ship_dh_cli"
     #   - script: echo ""
      #  - script: shipctl get_resource_version_name "ship_dh_cli"
     #   - script: echo ""
      #  - script: shipctl get_resource_version_number "ship_dh_cli"
     #   - script: echo ""
      #  - script: shipctl post_resource_state "test_paramsCLI" "TESTcli2" "rc2"
      #  - script: echo "TESTcli2=$TESTcli2"
      #  - script: echo ""
      #  - script: shipctl put_resource_state "test_paramsCLI" "TESTcli3" "rc3"
      #  - script: echo "TESTcli3=$TESTcli3"
      #  - script: echo ""
    #    - script: shipctl get_params_resource "test_paramsCLI" "TESTcli1"
     #   - script: echo ""
    #    - script: shipctl get_integration_resource "ship_dh_cli"
    #    #- script: shipctl refresh_file_to_out_path <filename> <resource name>
    #    #- script: shipctl refresh_file_to_state <filename>
    #    #- script: shipctl replace <filename1> <filename2> <filenameN>
    #    - script: echo ""
    #    - script: shipctl retry "echo 'retry commad'"
    #    - script: echo ""
    #    - script: shipctl sanitize_shippable_string "sanitize!@#"
    #    - script: echo ""
    #    - script: shipctl to_uppercase "uppercase!@#"
        ######### uncomment below line to test if PACKER is able to build an AMI on AWS
        #- script: packer build -var "aws_access_key="$SHIP_AWS_CLI_INTEGRATION_AWS_ACCESS_KEY_ID"" -var "aws_secret_key="$SHIP_AWS_CLI_INTEGRATION_AWS_SECRET_ACCESS_KEY"" IN/pipeline_scriptRepobb/gitRepo/packer.json
        ######### Restore previous Terraform statefile
       # - script: |
       #     cd /build/previousState
        #    if [[ -f terraform.tfstate ]]; then 
        #      cp terraform.tfstate $PIPELINE_SCRIPTREPOBB_STATE  
       #     fi
        ######## Export AWS env variables for use by Terraform CLI
      #  - script: >
       #     export 
        #    AWS_ACCESS_KEY_ID=$SHIP_AWS_CLI_INTEGRATION_AWS_ACCESS_KEY_ID 
         #   AWS_SECRET_ACCESS_KEY=$SHIP_AWS_CLI_INTEGRATION_AWS_SECRET_ACCESS_KEY
          #  AWS_DEFAULT_REGION=$SHIP_AWS_CLI_POINTER_REGION
        #- script: |
         #   cd $PIPELINE_SCRIPTREPOBB_STATE
          #  terraform apply
        ######## Execute Terraform script to destroy
        #- script: |
         #   cd $MYGITHUBREPO_STATE  
         #   terraform destroy -force
    on_success: 
      - script: echo "SUCCESS"
    on_failure:
      - script: echo "FAILURE"
    ############# save Terraform statefile for use in subsequent jobs
    #always:
    #  - script: |
     #     cd $PIPELINE_SCRIPTREPOBB_STATE_STATE
     #     cp terraform.tfstate /build/state
    flags:
      - provision-aws-terraform
      