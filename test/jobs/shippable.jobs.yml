jobs:  
  - name: runshscript  
    type: runSh
   # allowPublicAccess: true
    steps:
    
      - IN: pipeline_scriptRepobb
        showBuildStatus: true
      - IN: ship_dh
      - IN: sample_img
      - IN: test_params  
      - IN: t2runsh
      - IN: key-values
      - TASK:
        - script: ./IN/pipeline_scriptRepobb/gitRepo/runsh/testscript.sh
        - script: echo $key1
        - script: echo $key2
    flags: runshscript
   #   - OUT: test_out_img


  - name: runsh_pre_jobscript
    type: runSh
    on_start:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc
      - script: echo 'it is for on_start'      
    steps:    
      - IN: pipeline_scriptRepobb
        switch: off
      - IN: runshscript   
      - IN: same_syncRepos
      - TASK:
        - script: ./IN/pipeline_scriptRepobb/gitRepo/runsh/pre_runshjob.sh    
        - script: ./IN/same_syncRepos/gitRepo/script.sh  
        - script: printenv
    flags: runsh_pre_jobscript
    on_success:      
      - script: echo 'test in on_success'
      - script: ls
      - script: echo 'it is success'
    # # - script: ./IN/sample-script-3/gitRepo/echo.sh
    on_failure:
      - script: echo 'testing1 failure'      
      - script: pwd
      - script: echo 'OOPS on_failure :('
    always:
      - script: echo "This works on_always"
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc

  - name: runcliscript
    type: runCLI
   # allowPublicAccess: true
    steps:      
      - IN: plscript_RepoTagsnReleases  
      - IN: ship_dh_cli
      - IN: ship_aws_cli
      - IN: ship_gke_cli
      - IN: ship_ecr_cli
      - IN: ship_gcr_cli
      - IN: ship_quay_cli
      - IN: t3runcli
      - IN: key-values    
      - TASK:        
        - script: ./IN/plscript_RepoTagsnReleases/gitRepo/runcli/accInt.sh 
       # - script: printenv
        - script: echo $key1
        - script: echo $key2
    flags: runcliscript    
        
  - name: manifest_dep
    type: manifest
    steps:
      - IN: deploy_img       
      - IN: t1
    flags: manifest_dep
    
  - name: deploy_ddc
    type: deploy    
    on_start:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc
    steps:      
      - IN: manifest_dep
      - IN: ddc_cluster
      - IN: ddc_dopts
      - TASK: managed  
    flags: deploy_ddc
    on_success:         
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc      
    on_failure:
      - NOTIFY: notify-slack
      - NOTIFY: notify-email
      - NOTIFY: notify-hipchat
      - NOTIFY: notify-irc 

# Provision instances on AWS with Terraform
  - name: provision_aws_terraform_packer
    type: runCLI
    steps:
      - IN: ship_aws_cli
      - IN: pipeline_scriptRepobb
      - TASK:
        ######### uncomment below line to test if PACKER is able to build an AMI on AWS
        - script: packer build -var "aws_access_key="$SHIP_AWS_CLI_INTEGRATION_AWS_ACCESS_KEY_ID"" -var "aws_secret_key="$SHIP_AWS_CLI_INTEGRATION_AWS_SECRET_ACCESS_KEY"" IN/pipeline_scriptRepobb/gitRepo/packer.json
        ######### Restore previous Terraform statefile
        #- script: |
        #    cd /build/previousState
        #    if [[ -f terraform.tfstate ]]; then 
        #      cp terraform.tfstate $PIPELINE_SCRIPTREPOBB_STATE  
        #    fi
        ######## Export AWS env variables for use by Terraform CLI
       # - script: >
       #     export 
       #     AWS_ACCESS_KEY_ID=$SHIP_AWS_CLI_INTEGRATION_AWS_ACCESS_KEY_ID 
        #    AWS_SECRET_ACCESS_KEY=$SHIP_AWS_CLI_INTEGRATION_AWS_SECRET_ACCESS_KEY
        #    AWS_DEFAULT_REGION=$SHIP_AWS_CLI_POINTER_REGION
        #- script: |
        #    cd $PIPELINE_SCRIPTREPOBB_STATE
        #    terraform apply
   # on_success: 
   #   - script: echo "SUCCESS"
   # on_failure:
    #  - script: echo "FAILURE"
    ############# save Terraform statefile for use in subsequent jobs
   # always:
   #   - script: |
     #     cd $PIPELINE_SCRIPTREPOBB_STATE_STATE
     #     cp terraform.tfstate /build/state
   # flags:
    #  - provision-aws-terraform